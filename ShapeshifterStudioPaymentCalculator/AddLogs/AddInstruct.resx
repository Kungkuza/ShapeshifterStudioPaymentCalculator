<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        //8=
</value>
  </data>
</root>